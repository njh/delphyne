#!/usr/bin/env bash
#
# delphyne by @njh
# With varius functions stolen from dehydrated by lukas2511
#
# Source: https://github.com/njh/delphyne
#
# This script is licensed under The MIT License (see LICENSE for more information).

set -e
set -u
set -o pipefail

VERSION="0.0.1"
API_BASE_PATH="https://api.mythic-beasts.com/beta/dns"

# Load configuration from .env file, if it exists
if [ -f .env ]; then
  # shellcheck disable=SC1091
  source .env
fi
if [ -f .env.local ]; then
  # shellcheck disable=SC1091
  source .env.local
fi


# Create (identifiable) temporary files
_mktemp() {
  mktemp "${TMPDIR:-/tmp/}delphyne-XXXXXX"
}

# Different sed version for different os types...
_sed() {
  if [[ "${OSTYPE}" = "Linux" || "${OSTYPE:0:5}" = "MINGW" ]]; then
    sed -r "${@}"
  else
    sed -E "${@}"
  fi
}

# Print error message and exit with error
_exiterr() {
  echo "ERROR: ${1}" >&2
  exit 1
}

# Remove newlines and whitespace from json
clean_json() {
  tr -d '\r\n' | _sed -e 's/ +/ /g' -e 's/\{ /{/g' -e 's/ \}/}/g' -e 's/\[ /[/g' -e 's/ \]/]/g'
}

# Get string value from json dictionary
get_json_string_value() {
  local filter
  filter=$(printf 's/.*"%s": *"\([^"]*\)".*/\\1/p' "$1")
  sed -n "${filter}"
}

# Get integer value from json
get_json_int_value() {
  local filter
  filter=$(printf 's/.*"%s": *\([0-9]*\).*/\\1/p' "$1")
  sed -n "${filter}"
}

# Get array value from json dictionary
get_json_array_value() {
  local filter
  filter=$(printf 's/.*"%s": *\\[\([^]]*\)\\].*/\\1/p' "$1")
  sed -n "${filter}"
}

# Get sub-dictionary from json
get_json_dict_value() {
  local filter
  filter=$(printf 's/.*"%s": *{\([^}]*\)}.*/\\1/p' "$1")
  sed -n "${filter}"
}

# Get array value from json dictionary
get_json_array_as_lines() {
  _sed -n $'s/[ \t]*"([^"]*)",?[ \t]*/\\1\\\n/gp'
}

# Delete blank lines
delete_empty_lines() {
  _sed $'/^\r?$/d'
}

# Check for script dependencies
check_dependencies() {
  # just execute some dummy and/or version commands to see if required tools exist and are actually usable
  _sed "" < /dev/null > /dev/null 2>&1 || _exiterr "This script requires sed with support for extended (modern) regular expressions."
  command -v mktemp > /dev/null 2>&1 || _exiterr "This script requires mktemp."

  # curl returns with an error code in some ancient versions so we have to catch that
  set +e
  CURL_VERSION="$(curl -V 2>&1 | head -n1 | awk '{print $2}')"
  retcode="$?"
  set -e
  if [[ ! "${retcode}" = "0" ]] && [[ ! "${retcode}" = "2" ]]; then
    _exiterr "This script requires curl."
  fi
}

display_error() {
  local headerspath="${1}"
  local bodypath="${2}"
  local parsed_error=false
  local errstr

  # If the response was JSON, try and parse it
  if grep -iq "Content-Type: *application/json" "${headerspath}"; then
    # Single error message?
    errstr="$(clean_json < "${bodypath}" | get_json_string_value error)"
    if [ -n "${errstr}" ]; then
      parsed_error=true
      echo "=> ${errstr}" >&2
    else
      # Array of error messages?
      errstr="$(clean_json < "${bodypath}" | get_json_array_value errors)"
      if [ -n "${errstr}" ]; then
        parsed_error=true
        get_json_array_as_lines <<< "${errstr}" | while read -r line; do
          if [ -n "${line}" ]; then
            echo "=> ${line}" >&2
          fi
        done
      fi
    fi
  fi

  # If we failed to parse the error message, display the full response
  if [ "$parsed_error" = false ] ; then
    echo "=> An error occurred while making request" >&2
    echo >&2
    echo "Response:" >&2
    cat "${headerspath}" >&2
    cat "${bodypath}" >&2
    echo >&2
  fi
}

# Send http(s) request with specified method
http_request() {
  local method="${1}"
  local url="${API_BASE_PATH}${2}"
  local body="${3:-}"

  tempbody="$(_mktemp)"
  tempheaders="$(_mktemp)"

  if [[ -z "${MYTHIC_BEASTS_API_KEY}" || -z "${MYTHIC_BEASTS_SECRET}" ]]; then
    echo "Please ensure that MYTHIC_BEASTS_API_KEY and MYTHIC_BEASTS_SECRET are defined." >&2
    echo "This can be done either as an environment variable, or by defining in a .env file in the working directory." >&2
    exit 2
  fi

  # Build up the curl command arguments as an array
  cmd=("${CURL}" '--silent' '--show-error')
  if [ -n "${ip_version}" ]; then
    cmd+=("-${ip_version}")
  fi
  cmd+=('--request' "${method}")
  cmd+=('--user' "${MYTHIC_BEASTS_API_KEY}:${MYTHIC_BEASTS_SECRET}")
  cmd+=('--user-agent' "delphyne/${VERSION} curl/${CURL_VERSION}")
  if [ -n "${response_format}" ]; then
    cmd+=('--header' "Accept: ${response_format}")
  fi
  cmd+=('--write-out' "%{http_code}" '--output' "${tempbody}" '--dump-header' "${tempheaders}")

  # Add request body, if one is given
  if [ -n "${body}" ]; then
    if [ -n "${request_format}" ]; then
      cmd+=('--header' "Content-Type: ${request_format}")
    fi
    cmd+=('--data-binary' "${body}")
  fi
  cmd+=("${url}")

  if [[ "${debug}" ]]; then
    echo 'DEBUG:' "$(printf "'%s' " "${cmd[@]}")" >&2
  fi

  # Now execute the command we have built up
  set +e
  statuscode="$("${cmd[@]}")"
  curlret="${?}"
  set -e

  if [[ "${debug}" ]]; then
    echo >&2
    cat "${tempheaders}" >&2
    cat "${tempbody}" >&2
    echo >&2
  fi

  if [[ ! "${curlret}" = "0" ]]; then
    _exiterr "Problem connecting to server (${method} for ${url}; curl returned with ${curlret})"
  fi

  if [[ ! "${statuscode:0:1}" = "2" ]]; then
    display_error "${tempheaders}" "${tempbody}"
    rm -f "${tempbody}"
    rm -f "${tempheaders}"
    exit 1
  fi

  if ! grep -qv "Content-Type: *${response_format}" "${tempheaders}"; then
    echo "Warning: Content-Type of response was not in the expected format" >&2
  fi

  if { true >&4; } 2>/dev/null; then
    cat "${tempheaders}" >&4
  fi
  cat "${tempbody}"
  rm -f "${tempbody}"
  rm -f "${tempheaders}"
}

mime_type_for_format() {
  case "${format}" in
    json) echo 'application/json';;
    rfc1035) echo 'text/dns';;
    *) _exiterr "Unknown DNS record format";;
  esac
}

display_zones() {
  clean_json | get_json_array_value zones | get_json_array_as_lines | delete_empty_lines
}

display_message() {
  message="$(echo "${1}" | clean_json | get_json_string_value message)"
  if [ -n "${message}" ]; then
    echo "=> ${message}" >&2
  fi
}

# Usage: delphyne zones
# Description: List the registered zones
command_zones() {
  echo "Getting zones" >&2
  response_format='application/json'
  http_request get "/zones" | display_zones
}

# Usage: delphyne get <zone>
# Description: Get a DNS zone
command_get() {
  local zone="${1:-}"
  if [ -z "${zone}" ]; then
    echo "No zone name given." >&2
    command_help
  fi

  echo "Getting zone ${zone}" >&2
  response_format="$(mime_type_for_format)"
  http_request get "/zones/${zone}/records"
}

# Usage: delphyne dynamic <hostname>
# Description: Update hostname to public IP address of this machine
command_dynamic() {
  response_format='application/json'
  ip_version="${ip_version:-4}"

  echo "Dynamic update for ${1}" >&2
  result="$(http_request post "/dynamic/${1}")"
  display_message "${result}"
}

parse_zone_filename() {
  local base
  base="$(basename "${1}")"

  if [[ "${base}" =~ ^([a-z0-9.-]+\.[a-z0-9-]+)\.(json|zone)$ ]]; then
    echo "${BASH_REMATCH[1]}"
  elif [[ "${base}" =~ ^db\.([a-z0-9.-]+\.[a-z0-9-]+)$ ]]; then
    echo "${BASH_REMATCH[1]}"
  else
    _exiterr "Filename does not contain a valid zone name: ${base}"
  fi
}

publish_file() {
  local filename="${1}"
  if [ ! -f "$filename" ]; then
    _exiterr "File does not exist: ${filename}"
  fi

  zone="$(parse_zone_filename "${filename}")"
  echo "Publishing: $zone" >&2

  # If it ends .json, assume it is a JSON file
  if [[ "${filename}" =~ \.json$ ]]; then
    request_format='application/json'
  else
    request_format="$(mime_type_for_format)"
  fi

  response_format='application/json'
  result="$(http_request put "/zones/${zone}/records?exclude-generated" "@${filename}")"
  display_message "${result}"
  echo >&2
}

publish_directory() {
  local dir="${1}"
  shopt -s nullglob

  local paths
  case "${format}" in
    json) paths=("${dir}"/*.json);;
    rfc1035) paths=("${dir}"/*.zone "${dir}"/db.*);;
    *) _exiterr "Unknown DNS record format";;
  esac

  if [ ${#paths[@]} -gt 0 ]; then
    for filename in "${paths[@]}"; do
      publish_file "${filename}"
    done
  else
    _exiterr "No zone files found in directory: ${dir}"
  fi
}

# Usage: delphyne publish <filename>
# Description: Replace zone with contents of file
command_publish() {
  if [ "$#" -lt 1 ]; then
    publish_directory .
  else
    for filename in "$@"; do
      if [ -d "${filename}" ]; then
        publish_directory "${filename}"
      else
        publish_file "${filename}"
      fi
    done
  fi
}

# Usage: delphyne help
# Description: Show help text
command_help() {
  printf "Usage: %s [options] <command>\n\n" "${0}"
  echo "Commands:"
  grep -e '^[[:space:]]*# Usage:' -e '^[[:space:]]*# Description:' -e '^command_.*()[[:space:]]*{' "${0}" | while read -r usage; read -r description; read -r command; do
    if [[ ! "${usage}" =~ Usage ]] || [[ ! "${description}" =~ Description ]] || [[ ! "${command}" =~ ^command_ ]]; then
      _exiterr "Error generating help text."
    fi
    printf " %-32s %s\n" "${usage##"# Usage: "}" "${description##"# Description: "}"
  done

  printf -- "\nOptions:\n"
  grep -E -e '^[[:space:]]*# PARAM_Usage:' -e '^[[:space:]]*# PARAM_Description:' "${0}" | while read -r usage; read -r description; do
    if [[ ! "${usage}" =~ Usage ]] || [[ ! "${description}" =~ Description ]]; then
      _exiterr "Error generating help text."
    fi
    printf " %-32s %s\n" "${usage##"# PARAM_Usage: "}" "${description##"# PARAM_Description: "}"
  done

  exit 1
}

# Usage: delphyne version
# Description: Print version information
command_version() {
  echo "Delphyne version: ${VERSION}"
  echo ""
  echo "Used software:"
  [[ -n "${BASH_VERSION:-}" ]] && echo " bash: ${BASH_VERSION}"
  echo " curl: $(curl --version 2>&1 | head -n1 | cut -d" " -f1-2)"
  exit 0
}

set_defaults() {
  CURL="${CURL:-curl}"
  MYTHIC_BEASTS_API_KEY="${MYTHIC_BEASTS_API_KEY:-}"
  MYTHIC_BEASTS_SECRET="${MYTHIC_BEASTS_SECRET:-}"

  debug=
  ip_version=
  format=rfc1035
  request_format=
  response_format=
}

# Determine OS type
OSTYPE="$(uname)"

main() {
  # Check for missing dependencies
  check_dependencies

  set_defaults

  local params=()
  while (( "$#" )); do
    case "$1" in
      # PARAM_Usage: -j, --json
      # PARAM_Description: Use JSON file format for DNS records
      -j|--json)
        format=json
        ;;
      # PARAM_Usage: -r, --rfc1035
      # PARAM_Description: Use RFC1035 (aka bind) file format
      -r|--rfc1035)
        format=rfc1035
        ;;
      # PARAM_Usage: -d, --debug
      # PARAM_Description: Turn on debugging of the HTTP request
      -d|--debug)
        debug=1
        ;;
      # PARAM_Usage: -4, --ipv4
      # PARAM_Description: Use IPv4 when talking to the Mythic Beasts API
      -4|--ipv4)
        ip_version=4
        ;;
      # PARAM_Usage: -6, --ipv6
      # PARAM_Description: Use IPv6 when talking to the Mythic Beasts API
      -6|--ipv6)
        ip_version=6
        ;;
      -*)
        echo "Error: Unsupported flag $1" >&2
        command_help
        ;;
      *) # preserve positional arguments
        params+=("$1")
        ;;
    esac
    shift
  done

  case "${params[0]:-}" in
    dynamic) command_dynamic "${params[@]:1}";;
    get) command_get "${params[@]:1}";;
    publish) command_publish "${params[@]:1}";;
    version) command_version;;
    zones) command_zones;;
    *) command_help;;
  esac
}

if [[ "${BASH_SOURCE[0]}" == "${0}" ]]
then
  main "${@:-}"
fi
